using System;
using System.Collections.Generic;
using System.Text;

namespace SvSoft.Analyzers.GenericPolicyDecoratorGeneration;

[GenericPolicyDecorator]
partial class GenericPolicyFooDecorator : IFoo
{
    private readonly IFoo _inner;

    public GenericPolicyFooDecorator(IFoo inner)
    {
        _inner = inner;
    }

    private partial IFoo GetInner() => _inner;

    private partial void Decorate(Action doInner)
    {
        doInner();
    }

    private partial T Decorate<T>(Func<T> doInner)
    {
        return doInner();
    }

    private partial Task DecorateAsync(Func<Task> doInner)
    {
        return doInner();
    }

    private partial Task<T> DecorateAsync<T>(Func<Task<T>> doInner)
    {
        return doInner();
    }
}

interface IFoo
{
    void DoStuff();
    void DoOtherStuff(int arg1);
    Task DoStuffAsync();
    string GetStuff();
    Task<string> GetStuffAsync();
}

// <auto-generated />
partial class GenericPolicyFooDecorator
{
    private partial IFoo GetInner();

    void IFoo.DoStuff() => Decorate(() => GetInner().DoStuff());

    void IFoo.DoOtherStuff(int arg1) => Decorate(() => GetInner().DoOtherStuff(arg1));

    Task IFoo.DoStuffAsync() => DecorateAsync(() => GetInner().DoStuffAsync());

    string IFoo.GetStuff() => Decorate(() => GetInner().GetStuff());

    Task<string> IFoo.GetStuffAsync() => DecorateAsync(() => GetInner().GetStuffAsync());

    private partial void Decorate(Action doInner);
    private partial T Decorate<T>(Func<T> doInner);
    private partial Task DecorateAsync(Func<Task> doInner);
    private partial Task<T> DecorateAsync<T>(Func<Task<T>> doInner);
}

